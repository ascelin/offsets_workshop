cat(plot_worksheet_names[sheet_ind], file = fileConn, sep = "\n")
if (write_pdf == TRUE){
pdf(paste0('~/Documents/', plot_worksheet_names[sheet_ind], '.pdf'), width = 8.3, height = 11.7)
}
current_plot_starts = plot_starts[[sheet_ind]]
y_lims = sheet_y_lims[[sheet_ind]]
if (plot_selection_type == 'by_plot'){
setup_sub_plots(nx = 3, ny = 3, plot_x_space, plot_y_space)
}
for (plot_ind in 1:length(current_plot_starts)){
plot_lab = plot_names[[sheet_ind]][[1]][current_plot_starts[plot_ind] - 2]
rows_to_plot = current_plot_starts[plot_ind]:(current_plot_starts[plot_ind] + 3)
plot_list = lapply(seq(author_num), function(i) numerical_data_matrix[[sheet_ind]][rows_to_plot, , i])
current_mean_list = sheet_means[[sheet_ind]][rows_to_plot, ]
if (plot_selection_type == 'by_author'){
mean_plot_list = lapply(cols_to_plot, function(i) current_mean_list[, i])
if ('plot_means' == TRUE){
setup_sub_plots(nx = 1, ny = 1, x_space = plot_x_space, y_space = plot_y_space)
overlay_plot_list(plot_type = 'non-overlay', mean_plot_list, x_vec = time_vec, yticks = 'y', y_lims, heading = 'mean profiles', ylab = '', x_lab = '',
col_vec = rep('black', 3), lty_vec, lwd_vec = rep(mean_plot_lwd, length(plot_list)),
legend_vec = 'NA', legend_loc = FALSE)
} else {
setup_sub_plots(nx = 3, ny = 2, x_space = plot_x_space, y_space = plot_y_space)
for (author_ind in seq(author_num)){
current_plot_list = lapply(cols_to_plot, function(i) plot_list[[author_ind]][, i])
current_plot_name = plot_names[[sheet_ind]][[author_ind]][current_plot_starts[plot_ind] - 2]
current_plot_name = gsub("Management scenario:", "", current_plot_name)
overlay_plot_list(plot_type = 'non-overlay', current_plot_list, x_vec = time_vec, yticks = 'y', y_lims, heading = current_plot_name, ylab = '', x_lab = '',
col_vec = rep(author_col[author_ind], 3), lty_vec, lwd_vec = rep(plot_lwd, length(plot_list)),
legend_vec = 'NA', legend_loc = FALSE)
overlay_plot_list(plot_type = 'overlay', mean_plot_list, x_vec = time_vec, yticks = 'y', y_lims, heading = current_plot_name, ylab = '', x_lab = '',
col_vec = rep('black', 3), lty_vec, lwd_vec = rep(mean_plot_lwd, length(plot_list)),
legend_vec = 'NA', legend_loc = FALSE)
}
}
} else if (plot_selection_type == 'by_plot'){
for (col_ind in cols_to_plot){
current_plot_list = lapply(seq_along(plot_list), function(i) plot_list[[i]][, col_ind])
print(column_names[col_ind])
if (col_ind == 2){
y_lab = plot_lab
y_lab = gsub("Management scenario:", "", y_lab)
} else {
y_lab = ''
}
overlay_plot_list(plot_type = 'non-overlay', current_plot_list, x_vec = time_vec, yticks = 'y', y_lims, heading = column_names[col_ind], y_lab, x_lab = '',
col_vec = author_col, lty_vec = rep(plot_lty, length(plot_list)), lwd_vec = rep(plot_lwd, length(plot_list)),
legend_vec = 'NA', legend_loc = FALSE)
overlay_plot_list(plot_type = 'overlay', list(current_mean_list[, col_ind]), x_vec = time_vec, yticks = 'y', y_lims, heading = column_names[col_ind], y_lab, x_lab = '',
col_vec = 'black', lty_vec = mean_plot_lty, lwd_vec = mean_plot_lwd,
legend_vec = 'NA', legend_loc = FALSE)
}
}
cat(plot_lab, file = fileConn, sep = "\n")
cat(paste(author_col, rep(':', author_num), unlist(worksheet_comments[[sheet_ind]][plot_ind])), file = fileConn, sep = "\n")
cat('\n', file = fileConn, sep = "\n")
}
title(plot_worksheet_names[sheet_ind], outer=TRUE)
if (write_pdf == TRUE) {
graphics.off()
}
}
close(fileConn)
source('~/GitHub/offsets_workshop/plot_elicitations.R', echo=TRUE)
column_to_use = 3
x = c(1, 20, 40, 60)
spls = vector('list', plot_sheet_num)
fit_type = 'by_mean'
for (sheet_ind in 1:plot_sheet_num){
current_plot_starts = plot_starts[[sheet_ind]]
sheet_spls = vector('list', length(current_plot_starts))
for (plot_ind in 1:length(current_plot_starts)){
current_plot_vec = current_plot_starts[plot_ind]:(current_plot_starts[plot_ind] + 3)
if (fit_type == 'by_author'){
plot_list = lapply(seq_along(numerical_data[[sheet_ind]]), function(i) numerical_data[[sheet_ind]][[i]][current_plot_vec, ])
current_plot_list = lapply(seq_along(plot_list), function(i) plot_list[[i]][, column_to_use])
author_spls = vector('list', author_num)
for (author_ind in seq(author_num)){
current_plot = current_plot_list[[author_ind]]
if (all(!is.na(current_plot))){
author_spls[[author_ind]] <- smooth.spline(x, current_plot)
}
}
} else if (fit_type == 'by_mean'){
current_plot = sheet_means[[sheet_ind]][current_plot_vec, column_to_use]
if (all(!is.na(current_plot))){
author_spls <- smooth.spline(x, current_plot)
}
}
sheet_spls[[plot_ind]] = author_spls
}
spls[[sheet_ind]] = sheet_spls
}
spls
current_plot
plot(current_plot)
plot(x = 1:100, current_plot)
plot(x, current_plot, xlim = c(0, 100))
plot(x, current_plot, xlim = c(0, 100), y_lim = c(0, 60))
plot(x, current_plot, xlim = c(0, 100), ylim = c(0, 60))
x_new
plot(predict(spls[[plot_ind]], x_new))
spls[[plot_ind]]
plot(predict(spls[[sheet_ind]][[plot_ind]], x_new))
plot(predict(spls[[sheet_ind]][[plot_ind]], x_new), type = 'l')
points(x, y)
points(y, x)
y
points(x, current_plot)
current_plot
plot_x_space = 5
plot_y_space = 5
for (sheet_ind in 1:plot_sheet_num){
setup_sub_plots(nx = 3, ny = 3, plot_x_space, plot_y_space)
current_plot_starts = plot_starts[[sheet_ind]]
sheet_spls = vector('list', length(current_plot_starts))
for (plot_ind in 1:length(current_plot_starts)){
plot_lab = plot_names[[sheet_ind]][[1]][current_plot_starts[plot_ind] - 2]
current_plot_vec = current_plot_starts[plot_ind]:(current_plot_starts[plot_ind] + 3)
if (fit_type == 'by_author'){
plot_list = lapply(seq_along(numerical_data[[sheet_ind]]), function(i) numerical_data[[sheet_ind]][[i]][current_plot_vec, ])
current_plot_list = lapply(seq_along(plot_list), function(i) plot_list[[i]][, column_to_use])
author_spls = vector('list', author_num)
for (author_ind in seq(author_num)){
current_plot = current_plot_list[[author_ind]]
if (all(!is.na(current_plot))){
author_spls[[author_ind]] <- smooth.spline(x, current_plot)
}
}
} else if (fit_type == 'by_mean'){
current_plot_points = sheet_means[[sheet_ind]][current_plot_vec, column_to_use]
current_plot_list = list(predict(spls[[sheet_ind]][[plot_ind]], x_new))
y_lab = gsub("Management scenario:", "", plot_lab)
overlay_plot_list(plot_type = 'non-overlay', current_plot_list, x_vec = x_new, yticks = 'y', y_lims, heading = column_names[col_ind], y_lab, x_lab = '',
col_vec = author_col, lty_vec = rep(plot_lty, length(plot_list)), lwd_vec = rep(plot_lwd, length(plot_list)),
legend_vec = 'NA', legend_loc = FALSE)
points(x, current_plot_points)
}
sheet_spls[[plot_ind]] = author_spls
}
spls[[sheet_ind]] = sheet_spls
}
source('~/GitHub/offsets_workshop/generate_fits.R', echo=TRUE)
tracsback()
traceback()
plot_list = lapply(seq_along(numerical_data[[sheet_ind]]), function(i) numerical_data[[sheet_ind]][[i]][current_plot_vec, ])
fit_type
plot_lab = plot_names[[sheet_ind]][[1]][current_plot_starts[plot_ind] - 2]
current_plot_vec = current_plot_starts[plot_ind]:(current_plot_starts[plot_ind] + 3)
current_plot_vec
plot_lab
current_plot_points = sheet_means[[sheet_ind]][current_plot_vec, column_to_use]
current_plot_points
current_plot_list = list(predict(spls[[sheet_ind]][[plot_ind]], x_new))
current_plot_list
current_plot_points = sheet_means[[sheet_ind]][current_plot_vec, column_to_use]
current_plot_spline = predict(spls[[sheet_ind]][[plot_ind]], x_new)
current_plot_list = list(current_plot_spline$y)
y_lab = gsub("Management scenario:", "", plot_lab)
overlay_plot_list(plot_type = 'non-overlay', current_plot_list, x_vec = x_new, yticks = 'y', y_lims, heading = column_names[col_ind], y_lab, x_lab = '',
col_vec = author_col, lty_vec = rep(plot_lty, length(plot_list)), lwd_vec = rep(plot_lwd, length(plot_list)),
legend_vec = 'NA', legend_loc = FALSE)
plot_x_space = 5
plot_y_space = 5
for (sheet_ind in 1:plot_sheet_num){
setup_sub_plots(nx = 3, ny = 3, plot_x_space, plot_y_space)
current_plot_starts = plot_starts[[sheet_ind]]
sheet_spls = vector('list', length(current_plot_starts))
for (plot_ind in 1:length(current_plot_starts)){
plot_lab = plot_names[[sheet_ind]][[1]][current_plot_starts[plot_ind] - 2]
current_plot_vec = current_plot_starts[plot_ind]:(current_plot_starts[plot_ind] + 3)
if (fit_type == 'by_author'){
plot_list = lapply(seq(author_num), function(i) numerical_data_matrix[[sheet_ind]][rows_to_plot, , i])
current_plot_list = lapply(seq_along(plot_list), function(i) plot_list[[i]][, column_to_use])
author_spls = vector('list', author_num)
for (author_ind in seq(author_num)){
current_plot = current_plot_list[[author_ind]]
if (all(!is.na(current_plot))){
author_spls[[author_ind]] <- smooth.spline(x, current_plot)
}
}
} else if (fit_type == 'by_mean'){
current_plot_points = sheet_means[[sheet_ind]][current_plot_vec, column_to_use]
current_plot_spline = predict(spls[[sheet_ind]][[plot_ind]], x_new)
current_plot_list = list(current_plot_spline$y)
y_lab = gsub("Management scenario:", "", plot_lab)
overlay_plot_list(plot_type = 'non-overlay', current_plot_list, x_vec = x_new, yticks = 'y', y_lims, heading = column_names[col_ind], y_lab, x_lab = '',
col_vec = author_col, lty_vec = rep(plot_lty, length(plot_list)), lwd_vec = rep(plot_lwd, length(plot_list)),
legend_vec = 'NA', legend_loc = FALSE)
points(x, current_plot_points)
}
}
}
if (write_pdf == TRUE){
pdf(paste0('~/Documents/spline_fits.pdf'), width = 8.3, height = 11.7)
}
for (sheet_ind in 1:plot_sheet_num){
setup_sub_plots(nx = 3, ny = 3, plot_x_space, plot_y_space)
current_plot_starts = plot_starts[[sheet_ind]]
sheet_spls = vector('list', length(current_plot_starts))
for (plot_ind in 1:length(current_plot_starts)){
plot_lab = plot_names[[sheet_ind]][[1]][current_plot_starts[plot_ind] - 2]
current_plot_vec = current_plot_starts[plot_ind]:(current_plot_starts[plot_ind] + 3)
if (fit_type == 'by_author'){
plot_list = lapply(seq(author_num), function(i) numerical_data_matrix[[sheet_ind]][rows_to_plot, , i])
current_plot_list = lapply(seq_along(plot_list), function(i) plot_list[[i]][, column_to_use])
author_spls = vector('list', author_num)
for (author_ind in seq(author_num)){
current_plot = current_plot_list[[author_ind]]
if (all(!is.na(current_plot))){
author_spls[[author_ind]] <- smooth.spline(x, current_plot)
}
}
} else if (fit_type == 'by_mean'){
current_plot_points = sheet_means[[sheet_ind]][current_plot_vec, column_to_use]
current_plot_spline = predict(spls[[sheet_ind]][[plot_ind]], x_new)
current_plot_list = list(current_plot_spline$y)
y_lab = gsub("Management scenario:", "", plot_lab)
overlay_plot_list(plot_type = 'non-overlay', current_plot_list, x_vec = x_new, yticks = 'y', y_lims, heading = column_names[col_ind], y_lab, x_lab = '',
col_vec = author_col, lty_vec = rep(plot_lty, length(plot_list)), lwd_vec = rep(plot_lwd, length(plot_list)),
legend_vec = 'NA', legend_loc = FALSE)
points(x, current_plot_points)
}
}
}
if (write_pdf == TRUE){
graphics.off()
}
if (write_pdf == TRUE){
pdf(paste0('~/Documents/spline_fits.pdf'), width = 8.3, height = 11.7)
}
for (sheet_ind in 1:plot_sheet_num){
setup_sub_plots(nx = 3, ny = 1, plot_x_space, plot_y_space)
current_plot_starts = plot_starts[[sheet_ind]]
sheet_spls = vector('list', length(current_plot_starts))
for (plot_ind in 1:length(current_plot_starts)){
plot_lab = plot_names[[sheet_ind]][[1]][current_plot_starts[plot_ind] - 2]
current_plot_vec = current_plot_starts[plot_ind]:(current_plot_starts[plot_ind] + 3)
if (fit_type == 'by_author'){
plot_list = lapply(seq(author_num), function(i) numerical_data_matrix[[sheet_ind]][rows_to_plot, , i])
current_plot_list = lapply(seq_along(plot_list), function(i) plot_list[[i]][, column_to_use])
author_spls = vector('list', author_num)
for (author_ind in seq(author_num)){
current_plot = current_plot_list[[author_ind]]
if (all(!is.na(current_plot))){
author_spls[[author_ind]] <- smooth.spline(x, current_plot)
}
}
} else if (fit_type == 'by_mean'){
current_plot_points = sheet_means[[sheet_ind]][current_plot_vec, column_to_use]
current_plot_spline = predict(spls[[sheet_ind]][[plot_ind]], x_new)
current_plot_list = list(current_plot_spline$y)
y_lab = gsub("Management scenario:", "", plot_lab)
overlay_plot_list(plot_type = 'non-overlay', current_plot_list, x_vec = x_new, yticks = 'y', y_lims, heading = column_names[col_ind], y_lab, x_lab = '',
col_vec = author_col, lty_vec = rep(plot_lty, length(plot_list)), lwd_vec = rep(plot_lwd, length(plot_list)),
legend_vec = 'NA', legend_loc = FALSE)
points(x, current_plot_points)
}
}
}
if (write_pdf == TRUE){
graphics.off()
}
4%%1
4%%2
4%%3
4%%4
mod(4, 0)
3%%1
3%%2
3%%3
4%%1
4%%2
4%%3
4%%4
if (write_pdf == TRUE){
pdf(paste0('~/Documents/spline_fits.pdf'), width = 8.3, height = 11.7)
}
for (sheet_ind in 1:plot_sheet_num){
setup_sub_plots(nx = 3, ny = 3, plot_x_space, plot_y_space)
current_plot_starts = plot_starts[[sheet_ind]]
sheet_spls = vector('list', length(current_plot_starts))
for (plot_ind in 1:length(current_plot_starts)){
plot_lab = plot_names[[sheet_ind]][[1]][current_plot_starts[plot_ind] - 2]
current_plot_vec = current_plot_starts[plot_ind]:(current_plot_starts[plot_ind] + 3)
if (fit_type == 'by_author'){
plot_list = lapply(seq(author_num), function(i) numerical_data_matrix[[sheet_ind]][rows_to_plot, , i])
current_plot_list = lapply(seq_along(plot_list), function(i) plot_list[[i]][, column_to_use])
author_spls = vector('list', author_num)
for (author_ind in seq(author_num)){
current_plot = current_plot_list[[author_ind]]
if (all(!is.na(current_plot))){
author_spls[[author_ind]] <- smooth.spline(x, current_plot)
}
}
} else if (fit_type == 'by_mean'){
current_plot_points = sheet_means[[sheet_ind]][current_plot_vec, column_to_use]
current_plot_spline = predict(spls[[sheet_ind]][[plot_ind]], x_new)
current_plot_list = list(current_plot_spline$y)
y_lab = gsub("Management scenario:", "", plot_lab)
overlay_plot_list(plot_type = 'non-overlay', current_plot_list, x_vec = x_new, yticks = 'y', y_lims, heading = column_names[col_ind], y_lab, x_lab = '',
col_vec = author_col, lty_vec = rep(plot_lty, length(plot_list)), lwd_vec = rep(plot_lwd, length(plot_list)),
legend_vec = 'NA', legend_loc = FALSE)
points(x, current_plot_points)
}
}
}
if (write_pdf == TRUE){
graphics.off()
}
column_names[col_ind]
plot_x_space = 5
plot_y_space = 5
if (write_pdf == TRUE){
pdf(paste0('~/Documents/spline_fits.pdf'), width = 8.3, height = 11.7)
}
for (sheet_ind in 1:plot_sheet_num){
setup_sub_plots(nx = 3, ny = 3, plot_x_space, plot_y_space)
current_plot_starts = plot_starts[[sheet_ind]]
sheet_spls = vector('list', length(current_plot_starts))
for (plot_ind in 1:length(current_plot_starts)){
plot_lab = plot_names[[sheet_ind]][[1]][current_plot_starts[plot_ind] - 2]
current_plot_vec = current_plot_starts[plot_ind]:(current_plot_starts[plot_ind] + 3)
if (fit_type == 'by_author'){
plot_list = lapply(seq(author_num), function(i) numerical_data_matrix[[sheet_ind]][rows_to_plot, , i])
current_plot_list = lapply(seq_along(plot_list), function(i) plot_list[[i]][, column_to_use])
author_spls = vector('list', author_num)
for (author_ind in seq(author_num)){
current_plot = current_plot_list[[author_ind]]
if (all(!is.na(current_plot))){
author_spls[[author_ind]] <- smooth.spline(x, current_plot)
}
}
} else if (fit_type == 'by_mean'){
current_plot_points = sheet_means[[sheet_ind]][current_plot_vec, column_to_use]
current_plot_spline = predict(spls[[sheet_ind]][[plot_ind]], x_new)
current_plot_list = list(current_plot_spline$y)
y_lab = gsub("Management scenario:", "", plot_lab)
overlay_plot_list(plot_type = 'non-overlay', current_plot_list, x_vec = x_new, yticks = 'y', y_lims, heading = column_names[col_ind], y_lab, x_lab = '',
col_vec = author_col, lty_vec = rep(plot_lty, length(plot_list)), lwd_vec = rep(plot_lwd, length(plot_list)),
legend_vec = 'NA', legend_loc = FALSE)
points(x, current_plot_points)
}
}
title(plot_worksheet_names[sheet_ind], outer=TRUE)
}
if (write_pdf == TRUE){
graphics.off()
}
sheet_ind = 1
plot_ind = 3
graphics.off)
graphics.off()
current_plot_points = sheet_means[[sheet_ind]][current_plot_vec, column_to_use]
current_plot_spline = predict(spls[[sheet_ind]][[plot_ind]], x_new)
current_plot_list = list(current_plot_spline$y)
y_lab = gsub("Management scenario:", "", plot_lab)
overlay_plot_list(plot_type = 'non-overlay', current_plot_list, x_vec = x_new, yticks = 'y', y_lims, heading = column_names[col_ind], y_lab, x_lab = '',
col_vec = author_col, lty_vec = rep(plot_lty, length(plot_list)), lwd_vec = rep(plot_lwd, length(plot_list)),
legend_vec = 'NA', legend_loc = FALSE)
current_plot_points = sheet_means[[sheet_ind]][current_plot_vec, column_to_use]
current_plot_spline = predict(spls[[sheet_ind]][[plot_ind]], x_new)
current_plot_list = list(current_plot_spline$y)
y_lab = gsub("Management scenario:", "", plot_lab)
overlay_plot_list(plot_type = 'non-overlay', current_plot_list, x_vec = x_new, yticks = 'y', y_lims, heading = column_names[col_ind], y_lab, x_lab = '',
col_vec = author_col, lty_vec = rep(plot_lty, length(plot_list)), lwd_vec = rep(plot_lwd, length(plot_list)),
legend_vec = 'NA', legend_loc = FALSE)
smooth.spline(x, current_plot)
aa = smooth.spline(x, current_plot)
plot(aa)
plot(predict(aa, 1:100))
bb = smooth.spline(x, current_plot, df = 4)
plot(predict(bb, 1:100))
lines(predict(aa, 1:100))
plot(predict(aa, seq(1,100, 0.1)))
column_to_use = 3
x = c(1, 20, 40, 60)
x_new = 1:100
spls = vector('list', plot_sheet_num)
fit_type = 'by_mean'
for (sheet_ind in 1:plot_sheet_num){
current_plot_starts = plot_starts[[sheet_ind]]
sheet_spls = vector('list', length(current_plot_starts))
for (plot_ind in 1:length(current_plot_starts)){
current_plot_vec = current_plot_starts[plot_ind]:(current_plot_starts[plot_ind] + 3)
if (fit_type == 'by_author'){
plot_list = lapply(seq_along(numerical_data[[sheet_ind]]), function(i) numerical_data[[sheet_ind]][[i]][current_plot_vec, ])
current_plot_list = lapply(seq_along(plot_list), function(i) plot_list[[i]][, column_to_use])
author_spls = vector('list', author_num)
for (author_ind in seq(author_num)){
current_plot = current_plot_list[[author_ind]]
if (all(!is.na(current_plot))){
author_spls[[author_ind]] <- smooth.spline(x, current_plot)
}
}
} else if (fit_type == 'by_mean'){
current_plot = sheet_means[[sheet_ind]][current_plot_vec, column_to_use]
if (all(!is.na(current_plot))){
author_spls <- smooth.spline(x, current_plot)
}
}
sheet_spls[[plot_ind]] = author_spls
}
spls[[sheet_ind]] = sheet_spls
}
plot_x_space = 5
plot_y_space = 5
if (write_pdf == TRUE){
pdf(paste0('~/Documents/spline_fits.pdf'), width = 8.3, height = 11.7)
}
for (sheet_ind in 1:plot_sheet_num){
setup_sub_plots(nx = 3, ny = 3, plot_x_space, plot_y_space)
current_plot_starts = plot_starts[[sheet_ind]]
sheet_spls = vector('list', length(current_plot_starts))
for (plot_ind in 1:length(current_plot_starts)){
plot_lab = plot_names[[sheet_ind]][[1]][current_plot_starts[plot_ind] - 2]
current_plot_vec = current_plot_starts[plot_ind]:(current_plot_starts[plot_ind] + 3)
if (fit_type == 'by_author'){
plot_list = lapply(seq(author_num), function(i) numerical_data_matrix[[sheet_ind]][rows_to_plot, , i])
current_plot_list = lapply(seq_along(plot_list), function(i) plot_list[[i]][, column_to_use])
author_spls = vector('list', author_num)
for (author_ind in seq(author_num)){
current_plot = current_plot_list[[author_ind]]
if (all(!is.na(current_plot))){
author_spls[[author_ind]] <- smooth.spline(x, current_plot)
}
}
} else if (fit_type == 'by_mean'){
current_plot_points = sheet_means[[sheet_ind]][current_plot_vec, column_to_use]
current_plot_spline = predict(spls[[sheet_ind]][[plot_ind]], x_new)
current_plot_list = list(current_plot_spline$y)
y_lab = gsub("Management scenario:", "", plot_lab)
overlay_plot_list(plot_type = 'non-overlay', current_plot_list, x_vec = x_new, yticks = 'y', y_lims, heading = column_names[col_ind], y_lab, x_lab = '',
col_vec = author_col, lty_vec = rep(plot_lty, length(plot_list)), lwd_vec = rep(plot_lwd, length(plot_list)),
legend_vec = 'NA', legend_loc = FALSE)
points(x, current_plot_points)
}
}
title(plot_worksheet_names[sheet_ind], outer=TRUE)
}
if (write_pdf == TRUE){
graphics.off()
}
column_to_use = 3
x = c(1, 20, 40, 60)
x_new = 1:100
spls = vector('list', plot_sheet_num)
fit_type = 'by_mean'
for (sheet_ind in 1:plot_sheet_num){
current_plot_starts = plot_starts[[sheet_ind]]
sheet_spls = vector('list', length(current_plot_starts))
for (plot_ind in 1:length(current_plot_starts)){
current_plot_vec = current_plot_starts[plot_ind]:(current_plot_starts[plot_ind] + 3)
if (fit_type == 'by_author'){
plot_list = lapply(seq_along(numerical_data[[sheet_ind]]), function(i) numerical_data[[sheet_ind]][[i]][current_plot_vec, ])
current_plot_list = lapply(seq_along(plot_list), function(i) plot_list[[i]][, column_to_use])
author_spls = vector('list', author_num)
for (author_ind in seq(author_num)){
current_plot = current_plot_list[[author_ind]]
if (all(!is.na(current_plot))){
author_spls[[author_ind]] <- smooth.spline(x, current_plot, df = 4)
}
}
} else if (fit_type == 'by_mean'){
current_plot = sheet_means[[sheet_ind]][current_plot_vec, column_to_use]
if (all(!is.na(current_plot))){
author_spls <- smooth.spline(x, current_plot)
}
}
sheet_spls[[plot_ind]] = author_spls
}
spls[[sheet_ind]] = sheet_spls
}
plot_x_space = 5
plot_y_space = 5
if (write_pdf == TRUE){
pdf(paste0('~/Documents/spline_fits.pdf'), width = 8.3, height = 11.7)
}
for (sheet_ind in 1:plot_sheet_num){
setup_sub_plots(nx = 3, ny = 3, plot_x_space, plot_y_space)
current_plot_starts = plot_starts[[sheet_ind]]
sheet_spls = vector('list', length(current_plot_starts))
for (plot_ind in 1:length(current_plot_starts)){
plot_lab = plot_names[[sheet_ind]][[1]][current_plot_starts[plot_ind] - 2]
current_plot_vec = current_plot_starts[plot_ind]:(current_plot_starts[plot_ind] + 3)
if (fit_type == 'by_author'){
plot_list = lapply(seq(author_num), function(i) numerical_data_matrix[[sheet_ind]][rows_to_plot, , i])
current_plot_list = lapply(seq_along(plot_list), function(i) plot_list[[i]][, column_to_use])
author_spls = vector('list', author_num)
for (author_ind in seq(author_num)){
current_plot = current_plot_list[[author_ind]]
if (all(!is.na(current_plot))){
author_spls[[author_ind]] <- smooth.spline(x, current_plot)
}
}
} else if (fit_type == 'by_mean'){
current_plot_points = sheet_means[[sheet_ind]][current_plot_vec, column_to_use]
current_plot_spline = predict(spls[[sheet_ind]][[plot_ind]], x_new)
current_plot_list = list(current_plot_spline$y)
y_lab = gsub("Management scenario:", "", plot_lab)
overlay_plot_list(plot_type = 'non-overlay', current_plot_list, x_vec = x_new, yticks = 'y', y_lims, heading = column_names[col_ind], y_lab, x_lab = '',
col_vec = author_col, lty_vec = rep(plot_lty, length(plot_list)), lwd_vec = rep(plot_lwd, length(plot_list)),
legend_vec = 'NA', legend_loc = FALSE)
points(x, current_plot_points)
}
}
title(plot_worksheet_names[sheet_ind], outer=TRUE)
}
if (write_pdf == TRUE){
graphics.off()
}
source('~/GitHub/offsets_workshop/generate_fits.R', echo=TRUE)
